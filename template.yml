%YAML 1.1
---
AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS:Serverless-2016-10-31"

Parameters:
  ServiceName:
    Type: String
    Default: "social-media-app"
    Description: The name of the ECS service to deploy the website
  AdminRole:
    Type: String
    Description: The name of the IAM role that provides administrative permissions
  DeployEnvironment:
    Type: String
    AllowedValues:
      - development
      - qualityAssurance
      - production
    Description: The deployment environment (development, quality assurance, or production)
    DomainName:
      Type: String
      Description: The custom domain name to associate with the application (e.g., myapp.com)
    HostedZoneId:
      Type: String
      Description: The Route 53 Hosted Zone ID for the given domain name
    NodeEnv:
      Type: String
      Default: production
      Description: The runtime environment for the Node.js application (e.g., production, development)
    ContainerCpu:
      Type: Number
      Default: 256
      Description: The amount of CPU (in vCPU units) allocated to the container
    ContainerMemory:
      Type: Number
      Default: 512
      Description: The memory size (in megabytes) allocated to the container
    ContainerPort:
      Type: Number
      Description: The port number exposed by the container application (e.g., 80, 3000)
    InitialTaskCount:
      Type: Number
      Description: The initial number of ECS tasks (containers) to run when the service is deployed
    MaxTaskCount:
      Type: Number
      Default: 3
      Description: The maximum number of ECS tasks allowed for autoscaling
    MinTaskCount:
      Type: Number
      Default: 1
      Description: The minimum number of ECS tasks allowed for autoscaling
    HealthCheckIntervalSeconds:
      Type: Number
      Default: 30
      Description: The interval (in seconds) between health checks performed by the load balancer on ECS tasks
    HealthCheckPath:
      Type: String
      Default: /
      Description: The path that the load balancer uses to perform health checks (e.g., `/status`)
    CPUScalingPercentage:
      Type: Number
      Default: 50
      Description: The CPU utilization percentage at which autoscaling should increase the number of ECS tasks
    RequestsPerMinuteScaling:
      Type: Number
      Default: 1000
      Description: The number of requests per minute that trigger autoscaling (above or below this value)
    PublicSubnets:
      Type: String
      Description: A comma-separated list of public subnet IDs for deploying the ECS service
    PrivateSubnets:
      Type: String
      Description: A comma-separated list of private subnet IDs for internal service components (e.g., databases)
    DefaultVPC:
      Type: String
      Description: The ID of the default VPC to use for the ECS service deployment

Conditions:
  UseCertificates:
    Fn::Equals:
      - !Ref DeployEnvironment
      - production

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties: {}

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ServiceName}/*

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
                  - secretmanager:GetSecretValue
                Resource: "*"

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescriptio: A security group providing access control to Fargate containers
      VpcId: !Ref DefaultVPC

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow ingress traffic (incoming traffic) from the public Application Load Balancer (ALB) to Fargate containers
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow ingress traffic (incoming traffic) between Fargate containers within the same security group
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the public-facing load balancer, controlling inbound and outbound traffic
      VpcId: !Ref DefaultVPC

  PublicLoadBalancerIngressFromInternet:
    Type: AWS::Ec2::SecurityGroupIngress
    Properties:
      Description: Allow ingress (inbound) traffic from the internet to the public-facing load balancer
      GroupId: !Ref PublicLoadBalancerSG
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets: !Split [",", !Ref PublicSubnets]
      SeucrityGroups:
        - !Ref PublicLoadBalancerSG
        - !GetAtt PublicSecurityGroup.GroupId

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalsSeconds: !Ref HealthCheckIntervalsSeconds
      HealthCheckPath: !Ref HealthCheckPath
      HealthCHeckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      TargetType: ip
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref DefaultVPC

  PublicLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  PublicLoadBalancerHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref HttpsCertificate
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerAr: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
